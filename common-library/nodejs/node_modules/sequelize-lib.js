const Sequelize = require('sequelize');
const { DataTypes } = Sequelize;


let chatroom;
let user;
let message;

async function model(){
    const sequelize = await initConnectionSequelize();

    const DISABLE_SEQUELIZE_DEFAULTS = {
        timestamps: false,
        freezeTableName: true,
        schema: process.env.STAGE
    };

    chatroom = sequelize.define('chatRoom', {
        id: { type: DataTypes.STRING, primaryKey: true, unique: true },
        name: { type: DataTypes.STRING, unique: true },
        type: { type: DataTypes.BOOLEAN },
        created_at: { type: DataTypes.DATE },
        updated_at: { type: DataTypes.DATE},
        updated_by: { type: DataTypes.STRING },
    }, DISABLE_SEQUELIZE_DEFAULTS);
    
    user = sequelize.define('user', {
        id: { type: DataTypes.STRING, primaryKey: true, unique: true },
        user_name: { type: DataTypes.STRING, allowNull: false },
        chatroom_id: { type: DataTypes.STRING, allowNull: false },
        name: { type: DataTypes.STRING },
        created_at: { type: DataTypes.DATE },
        updated_at: { type: DataTypes.DATE },
        created_by: { type: DataTypes.STRING },
        updated_by: { type: DataTypes.STRING },
        indexes: [
            {
                unique: true,
                fields: ['user_name', 'chatroom_id'],
            },
        ],
    }, DISABLE_SEQUELIZE_DEFAULTS);
    
    message = sequelize.define('message', {
        id: { type: DataTypes.STRING, primaryKey: true, unique: true },
        chatroom_id: { type: DataTypes.STRING, allowNull: false },
        user_id: { type: DataTypes.STRING, allowNull: false },
        value: { type: DataTypes.STRING },
        created_at: { type: DataTypes.DATE },
        updated_at: { type: DataTypes.DATE },
        created_by: { type: DataTypes.STRING },
        updated_by: { type: DataTypes.STRING },
    }, DISABLE_SEQUELIZE_DEFAULTS);
    
    // Definisi hubungan
    user.belongsTo(chatroom, { foreignKey: 'chatroom_Id' });
    chatroom.hasMany(user, { foreignKey: 'chatroom_Id' });
    
    message.belongsTo(user, { foreignKey: 'user_id' });
    user.hasMany(message, { foreignKey: 'user_id' });
    
    message.belongsTo(chatroom, { foreignKey: 'chatroom_id' });
    chatroom.hasMany(message, { foreignKey: 'chatroom_id' });
    
    await sequelize.sync();
}

async function initConnectionSequelize() {
    const sequelize = new Sequelize(process.env.DATABASE_URL, {
        dialect: 'postgres',
        dialectOptions: {
            ssl: {
                ca: null,
                cert: null,
                key: null,
            },
        },
        ssl: true,
        // operatorsAliases: false
    });
    
    await sequelize.authenticate();
    console.log('Connection has been established successfully.');

    return sequelize
}

module.exports.chatroom = async() =>{
    await model();
    return chatroom;
}

module.exports.message = async() =>{
    await model();
    return message;
}

module.exports.user = async() =>{
    await model();
    return user;
}


// const createChatRoom = await chatRoom.create({
//     id: 1,
//     name: "kevin",
//     veg: true
// });

// const createItem = await Item.create({
//     id: 1,
//     name: "kevin",
//     type: true
// });

// // Now, you can use the include option to fetch associated data
// const qryResult = await chatRoom.findAll({
//     where: { id: 1 },
//     include: [{ model: Item }]
// });