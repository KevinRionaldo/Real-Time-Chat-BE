const Sequelize = require('sequelize');
const { DataTypes } = Sequelize;


module.exports.sequelize = async (event, context) => {
    const DISABLE_SEQUELIZE_DEFAULTS = {
        timestamps: false,
        freezeTableName: true,
        schema: 'kevin'
    };
    
    const sequelize = new Sequelize(process.env.DATABASE_URL, {
        dialect: 'postgres',
        dialectOptions: {
            ssl: {
                ca: null,
                cert: null,
                key: null,
            },
        },
        ssl: true,
        // operatorsAliases: false
    });
    
    await sequelize.authenticate();
    console.log('Connection has been established successfully.');
    
    const chatRoom = sequelize.define('chatRoom', {
        id: { type: DataTypes.STRING, primaryKey: true, unique: true },
        name: { type: DataTypes.STRING, unique: true },
        type: { type: DataTypes.BOOLEAN },
        createdAt: { type: DataTypes.TIMESTAMPS },
        updatedAt: { type: DataTypes.TIMESTAMPS },
        createdBy: { type: DataTypes.STRING },
        updatedBy: { type: DataTypes.STRING },
    }, DISABLE_SEQUELIZE_DEFAULTS);
    
    const user = sequelize.define('user', {
        id: { type: DataTypes.STRING, primaryKey: true, unique: true },
        userName: { type: DataTypes.STRING, allowNull: false },
        chatRoomId: { type: DataTypes.STRING, allowNull: false },
        name: { type: DataTypes.STRING },
        createdAt: { type: DataTypes.TIMESTAMPS },
        updatedAt: { type: DataTypes.TIMESTAMPS },
        createdBy: { type: DataTypes.STRING },
        updatedBy: { type: DataTypes.STRING },
    }, {
        indexes: [
            {
                unique: true,
                fields: ['userName', 'chatRoomId'],
            },
        ],
    }, DISABLE_SEQUELIZE_DEFAULTS);
    
    const message = sequelize.define('message', {
        id: { type: DataTypes.STRING, primaryKey: true, unique: true },
        chatRoomId: { type: DataTypes.STRING, allowNull: false },
        userId: { type: DataTypes.STRING, allowNull: false },
        value: { type: DataTypes.STRING },
        createdAt: { type: DataTypes.TIMESTAMPS, allowNull: false },
        updatedAt: { type: DataTypes.TIMESTAMPS },
        createdBy: { type: DataTypes.STRING, allowNull: false },
        updatedBy: { type: DataTypes.STRING },
    }, DISABLE_SEQUELIZE_DEFAULTS);
    
    // Definisi hubungan
    user.belongsTo(chatRoom, { foreignKey: 'chatRoomId' });
    chatRoom.hasMany(user, { foreignKey: 'chatRoomId' });
    
    message.belongsTo(user, { foreignKey: 'userId' });
    user.hasMany(message, { foreignKey: 'userId' });
    
    message.belongsTo(chatRoom, { foreignKey: 'chatRoomId' });
    chatRoom.hasMany(message, { foreignKey: 'chatRoomId' });
    
    await sequelize.sync();
}


const createChatRoom = await chatRoom.create({
    id: 1,
    name: "kevin",
    veg: true
});

const createItem = await Item.create({
    id: 1,
    name: "kevin",
    type: true
});

// Now, you can use the include option to fetch associated data
const qryResult = await chatRoom.findAll({
    where: { id: 1 },
    include: [{ model: Item }]
});

sequelize.close();

return qryResult
