service: ${file(../../service.yml):service}-chat-room

# Framework version constraint (semver constraint): '3', '^2.33'
frameworkVersion: '3'

params: ${file(../../params.yml)}

provider: 
  name: aws
  deploymentMethod: direct
  region: ap-southeast-1
  profile: ${file(../../service.yml):profile}
  runtime: nodejs18.x
  # stackName: ${self:service}-stack-${opt:stage, self:provider.stage}
  stage: ${opt:stage, self:provider.stage}
  memorySize: 256
  timeout: 30
  architecture: arm64
  environment:
    POST_WSCAT: ${param:post-wscat}
    STAGE: ${opt:stage, self:provider.stage}
    DB_USER: ${param:db-username}
    DB_NAME: ${param:db-name}
    DATABASE_URL: 
      Fn::Join: 
        - ''
        - - "postgresql://"
          - ${param:db-username}
          - ":"
          - ${param:db-password}
          - ${param:db-host}
          - ${param:db-name}
          - "?sslmode=verify-full"

  # httpApi:
  #   cors: true
  #   authorizers:
  #     someJwtAuthorizer:
  #       type: jwt
  #       identitySource: $request.header.Authorization
  #       issuerUrl: https://cognito-idp.${opt:region, self:provider.region}.amazonaws.com/${param:UserPoolId}
  #       audience: 
  #         - '${param:UserPoolClient}'

package:
  patterns:
    - "!layerSourceTarball.tar.gz"

layers:
  RealTimeChatCommonLibrary:
    path: ../../common-library
  RealTimeChatNpmLibrary:
    path: ../../npm-library

functions:
  get-chatroom:
    handler: src/chatroom.get
    layers:
      - !Ref RealTimeChatCommonLibraryLambdaLayer
      - !Ref RealTimeChatNpmLibraryLambdaLayer
    events:
      - httpApi:
            method: GET
            path: /chatroom
            cors: true
            # authorizer:
            #   name: someJwtAuthorizer
  count-chatroom:
    handler: src/chatroom.count
    layers:
      - !Ref RealTimeChatCommonLibraryLambdaLayer
      - !Ref RealTimeChatNpmLibraryLambdaLayer
    events:
      - httpApi:
            method: GET
            path: /chatroom/count
            cors: true
            # authorizer:
            #   name: someJwtAuthorizer
  create-chatroom:
    handler: src/chatroom.create
    layers:
      - !Ref RealTimeChatCommonLibraryLambdaLayer
      - !Ref RealTimeChatNpmLibraryLambdaLayer
    events:
      - httpApi:
            method: POST
            path: /chatroom
            cors: true
            # authorizer:
            #   name: someJwtAuthorizer
  update-chatroom:
    handler: src/chatroom.update
    layers:
      - !Ref RealTimeChatCommonLibraryLambdaLayer
      - !Ref RealTimeChatNpmLibraryLambdaLayer
    events:
      - httpApi:
            method: PUT
            path: /chatroom/{id}
            cors: true
            # authorizer:
            #   name: someJwtAuthorizer
  delete-chatroom:
    handler: src/chatroom.delete
    layers:
      - !Ref RealTimeChatCommonLibraryLambdaLayer
      - !Ref RealTimeChatNpmLibraryLambdaLayer
    events:
      - httpApi:
            method: DELETE
            path: /chatroom/{id}
            cors: true
            # authorizer:
            #   name: someJwtAuthorizer

plugins:
  - serverless-offline
